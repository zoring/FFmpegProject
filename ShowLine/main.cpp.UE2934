#include <QCoreApplication>

#include <stdio.h>
#include <iostream>
#include <QtDebug>
#define __STDC_CONSTANT_MACROS

#ifdef _WIN32
//Windows
extern "C"
{
#include "libavformat/avformat.h"
#include "libavutil/mathematics.h"
#include "libavutil/time.h"
};
#else
//Linux...
#ifdef __cplusplus
extern "C"
{
#endif
#include <libavformat/avformat.h>
#include <libavutil/mathematics.h>
#include <libavutil/time.h>
#include <libavutil/audio_fifo.h>
#include <libswresample/swresample.h>
#ifdef __cplusplus
};
#endif
#endif

using namespace std;
#define ERRORMSG "fd "
string InputName = "rtsp://admin:admin@192.168.3.78:554/cam/realmonitor?channel=1&subtype=0", OutputName="rtmp://0.0.0.0/myapp/test1";
AVFormatContext *Input_formatCnt, *Output_formatCnt;

AVFrame *Input_Frame, *Output_Frame;
AVBitStreamFilterContext* aacbsfc;

AVStream *Input_Video_Stream, *Input_Audio_Stream,\
         *Output_Video_Stream, *OutPut_Audio_Stream;
int VideoIndex, AudioIndex;
AVCodec* InputCodec;
AVRational time_base_q = { 1, AV_TIME_BASE };
 int bufsize;
 char* buf ;
int64_t begintime;
int64_t LastPackTime;
void printTime();
bool InintEnCodecAACMsg(AVFormatContext *&pFormatCtx, AVStream *&fmt, AVStream *& infmt)
{


    AVOutputFormat* fmtd = pFormatCtx->oformat;

    pFormatCtx->oformat->audio_codec = AV_CODEC_ID_AAC;
    AVCodec* AACCodec = NULL;
    AVCodecContext* AACCodecCnt, *srcCodectx;
    srcCodectx = infmt->codec;
    AACCodec = avcodec_find_encoder(AV_CODEC_ID_AAC);
    if (!AACCodec)
        return false;
    fmt = avformat_new_stream(pFormatCtx, AACCodec);
    fmt->id = pFormatCtx->nb_streams -1;
    AACCodecCnt = fmt->codec;
    AACCodecCnt->codec_id = AV_CODEC_ID_AAC;
    AACCodecCnt->codec_type = AVMEDIA_TYPE_AUDIO ;
    AACCodecCnt->profile = FF_PROFILE_AAC_MAIN;
    AACCodecCnt->block_align = 0;
    AACCodecCnt->bit_rate = 64000;
    AACCodecCnt->channels = av_get_channel_layout_nb_channels(AACCodecCnt->channel_layout);  ;
    AACCodecCnt->sample_rate = 44100;
    AACCodecCnt->sample_fmt = AV_SAMPLE_FMT_S16;
    AACCodecCnt->channel_layout = AV_CH_LAYOUT_STEREO;;
   // AACCodecCnt->strict_std_compliance = FF_COMPLIANCE_EXPERIMENTAL;

    fmt->time_base = {1,AACCodecCnt->sample_rate};


    fmt->time_base = { infmt->time_base.num,infmt->time_base.den};
    fmt->codec->codec_tag = 0;

    //Format wants global header,outputStream.flags : Place global headers in extradata instead of every keyframe.H264输出时候必要
    if( pFormatCtx->oformat->flags |= AVFMT_GLOBALHEADER)
        fmt->codec->flags |= CODEC_FLAG_GLOBAL_HEADER ;
    if (avcodec_open2(AACCodecCnt, AACCodec, NULL) < 0)
    {
        qDebug() <<   QString("InintEnCodecAACMsg, can not open the codec ");
        return false;
    }

    return true;
}


//打开输入端,保证只运行一次
bool OpenInputStream()
{


    AVDictionary *avdic =NULL;

    av_dict_set(&avdic,"rtsp_transport", "tcp", 0);
    av_dict_set(&avdic,"stimeout","1000000",0);
    av_dict_set(&avdic, "max_delay","50000",0);
    av_dict_set(&avdic,"fflags","nobuffer",0);
  //  av_dict_set(&avdic,"allowed_media_types","video",0);
    int ret = avformat_open_input(&Input_formatCnt,InputName.c_str() , NULL, &avdic) ;
    if ( ret < 0 )
    {
        char error[128];
                            const char *errbuf_ptr = error;
                             av_strerror(ret, error, sizeof(error));
                             errbuf_ptr = strerror(AVUNERROR(ret));
                            qDebug()<< QString(errbuf_ptr);
                qDebug() <<   QString("InitOutPutMsg, can not write header  ") + QString(OutputName.c_str()) ;
        qDebug() <<  QString("OpenInputStream, can not open avformat input ") + QString(InputName.c_str());
        return false ;
    }

    if ((avformat_find_stream_info(Input_formatCnt , 0)) < 0 )
    {    //avformat_open_input只是打开头文件，读取流是该函数
        qDebug() <<   QString("OpenInputStream, there is no information in that open ");
        return false;
    }

    av_dump_format(Input_formatCnt, 0, InputName.c_str(), 0);           //输出format的信息

    return true;
}

//查找视频流
bool FindInputVideoStream()
{
    for( int i=0; i < Input_formatCnt->nb_streams; ++i )
    {
        if( Input_formatCnt->streams[i]->codec->codec_type == AVMEDIA_TYPE_VIDEO){
            Input_Video_Stream =  Input_formatCnt->streams[i];
            VideoIndex = i;
            return true;
        }
    }
    return false;
}

bool FindInputAudioStream()
{
    for( int i=0; i < Input_formatCnt->nb_streams; ++i )
    {
        if( Input_formatCnt->streams[i]->codec->codec_type == AVMEDIA_TYPE_AUDIO){
            Input_Audio_Stream =  Input_formatCnt->streams[i];
            AudioIndex = i;
            return true;
        }
    }
    return false;
}



bool FindInputAVStream()
{
    if(FindInputVideoStream() && FindInputAudioStream())
    {

        return true;
    }
    return false;

}
//以下为输出端, 编码器信息
bool InitOutputStream(AVFormatContext *&outputCnt, AVStream *&outputStream, AVStream *&inputStream)
{

    //根据编码器复制输入端的视频流信息
    outputStream = avformat_new_stream(outputCnt, inputStream->codec->codec);
    if ( !outputStream )
    {
        qDebug() << ERRORMSG + QString("InitOutPutMsg, failed allocating output stream ");
        return false ;
    }

    if (avcodec_copy_context(outputStream->codec, inputStream->codec) < 0 )
    {
       qDebug() << ERRORMSG + QString("InitOutPutMsg, failed to copy context from input to output stream codec context ");
       return false;
    }

    outputStream->codec->codec_tag = 0;

    //Format wants global header,outputStream.flags : Place global headers in extradata instead of every keyframe.H264输出时候必要
    if( outputCnt->oformat->flags |= AVFMT_GLOBALHEADER)
        outputStream->codec->flags |= CODEC_FLAG_GLOBAL_HEADER;
    return true;
}





//公用初始化输出，无论直播还是保存
bool InitOutMsg(AVFormatContext* &Out_formatCnt,const string &name, AVStream *&out_videoStream,  AVStream *&out_audioStream)
{

    if(Input_Video_Stream)
    {
        if ( !InitOutputStream(Out_formatCnt, out_videoStream, Input_Video_Stream) )
            return false;
    }

    if (Input_Audio_Stream)
    {

            if( !InintEnCodecAACMsg(Out_formatCnt, out_audioStream,Input_Audio_Stream) )
                return false ;


    }

    av_dump_format(Out_formatCnt, 0, name.c_str(), 1);
    if( avio_open(&Out_formatCnt->pb, name.c_str(), AVIO_FLAG_WRITE) < 0)
    {
        qDebug() << ERRORMSG + QString("InitOutPutMsg, can not open avio  ") + QString(name.c_str()) ;
        return false;
    }

    int ret = avformat_write_header(Out_formatCnt, NULL) ;

    //写文件头（对于某些没有文件头的封装格式，不需要此函数。比如说MPEG2TS）
    if(  ret < 0)
    {
        cout<< ret<<endl;
        qDebug() << QString("InitOutPutMsg, can not write header  ") + QString(name.c_str()) ;
        return false;
    }
    return true;
}




bool InitOutputInformation()
{
    //初始化输出码流的AVFormatContext。
    avformat_alloc_output_context2(&Output_formatCnt, 0, "flv", OutputName.c_str());

    if( !Output_formatCnt )
    {
        qDebug() << ERRORMSG + QString("InitOutputInformation, can not create output context File name ") + QString(OutputName.c_str()) ;
        return false;
    }
   if( !InitOutMsg(Output_formatCnt, OutputName, Output_Video_Stream, OutPut_Audio_Stream) )
       return false;
//    if (!InitoutputTest())
//        return false;
   return true;
}




void InitAudiotest(){
     AVCodec* AACCodec = NULL;
    avformat_alloc_output_context2(&Output_formatCnt, NULL, "flv", OutputName.c_str());
    OutPut_Audio_Stream = avformat_new_stream(Output_formatCnt, AACCodec);


    AACCodec = avcodec_find_encoder(AV_CODEC_ID_AAC);
    if (!AACCodec)
        return ;
    AVCodecContext* AACCodecCnt = OutPut_Audio_Stream->codec;
    AACCodecCnt->codec_id = AV_CODEC_ID_AAC ;
    AACCodecCnt->bit_rate = 64000;
    AACCodecCnt->sample_fmt = AV_SAMPLE_FMT_S16;

    AACCodecCnt->codec_type = AVMEDIA_TYPE_AUDIO;

    AACCodecCnt->sample_rate =44100;
    AACCodecCnt->channel_layout = AV_CH_LAYOUT_STEREO;
    AACCodecCnt->channels = av_get_channel_layout_nb_channels(AACCodecCnt->channel_layout);

    if (Output_formatCnt->oformat->flags & AVFMT_GLOBALHEADER)
        AACCodecCnt->flags |= CODEC_FLAG_GLOBAL_HEADER;

    if (avcodec_open2(AACCodecCnt,AACCodec,NULL ) < 0){
        cout<< "dfdsf"<<endl;
        return ;
    }
     av_dump_format(Output_formatCnt, 0, OutputName.c_str(), 1);
    if (avio_open(&Output_formatCnt->pb, OutputName.c_str(), AVIO_FLAG_READ_WRITE) < 0)
    {
        cout<<"false"<<endl;
        return ;
    }

    int ret = avformat_write_header(Output_formatCnt, NULL) ;

    //写文件头（对于某些没有文件头的封装格式，不需要此函数。比如说MPEG2TS）
    if(  ret < 0)
    {
        cout<< ret<<endl;
        qDebug() << QString("InitOutPutMsg, can not write header  ") + QString(OutputName.c_str()) ;
        return ;
    }
    av_dump_format(Output_formatCnt, 0, OutputName.c_str(), 1);

    cout<< OutPut_Audio_Stream->time_base.den << " "<< OutPut_Audio_Stream->codec->time_base.den<<endl;
    cout<< ret<<endl;
}




bool TurnToAAC(AVFrame *&SourceFrame, AVPacket *&TPkt, AVCodecContext *&inputCodecCnt)
{
    static int64_t startTime =0;
    static int kl=0;
    bufsize = 1024;
    //bufsize = av_samples_get_buffer_size(NULL, inputCodecCnt->channels, inputCodecCnt->frame_size, inputCodecCnt->sample_fmt, 1);
    static int size = 0;
    static bool frist =true;
    //cout<< SourceFrame->linesize[0]<< "fdf"<< bufsize<<endl;
//    if (frist)
//      { startTime = SourceFrame->pkt_pts;
//        buf =new  char[bufsize];}
//    if (size + SourceFrame->linesize[0] < bufsize)
//    {
//       // cout<<"SourceFrame memcpy"<<endl;
//        memcpy(buf+size,SourceFrame->data[0],SourceFrame->linesize[0] );
//        size += SourceFrame->linesize[0] ;
//        return false;

//    }
//    else
//    {
//        kl++;
//    int Copysize = bufsize - size;
//    memcpy(buf+size,SourceFrame->data[0],Copysize);

//    AVFrame *frame;

//    frame = avcodec_alloc_frame();
//    if ( !frame )
//    {
//        cout<< "Error in frame "<<endl;
//        return false;
//    }

//    frame->nb_samples = inputCodecCnt->frame_size;
//    frame->format = inputCodecCnt->sample_fmt;
//    frame->channel_layout = SourceFrame->channel_layout;
//    frame->data[0] = (uint8_t*)buf;
//    //avcodec_fill_audio_frame(frame, inputCodecCnt->channels, inputCodecCnt->sample_fmt,(const uint8_t*)buf, bufsize, 1);
//    SourceFrame->pts =av_frame_get_best_effort_timestamp(SourceFrame);
//    frame->pts =  SourceFrame->pts;
//    frame->pts =SourceFrame->pkt_pts;
    SourceFrame->pts = SourceFrame->pkt_pts;
    TPkt = NULL;
    int finshPkt = 0;
    TPkt = new AVPacket;
    av_init_packet(TPkt);
    TPkt->data = NULL;
    TPkt->size = 0;



    int ret = avcodec_encode_audio2(OutPut_Audio_Stream->codec, TPkt, SourceFrame, &finshPkt);

    if (ret <  0)
    {
//         delete buf;
//         startTime = SourceFrame->pkt_pts;
//         buf =  new  char [size];
//         size = 0;
         qDebug() << ERRORMSG + QString("TurnToAAC, error in encodec audio ");
         return false;
    }
    if (finshPkt)
    {

//        delete buf;
//         startTime = SourceFrame->pkt_pts;
//        buf =  new  char [size];
//        size = SourceFrame->linesize[0] - Copysize;
//        memcpy(buf,SourceFrame->data[0] + Copysize ,size);
        static bool frist=true;
        if (frist)
         {LastPackTime = av_rescale_q( TPkt->pts, Input_Audio_Stream->time_base,time_base_q);
          frist =false;}
        else
        {
            //cout<< " between two "<< av_rescale_q( TPkt->pts, Input_Audio_Stream->time_base,time_base_q) - LastPackTime <<endl;
            LastPackTime = av_rescale_q( TPkt->pts, Input_Audio_Stream->time_base,time_base_q);
        }
        printTime();

        TPkt->pts = av_rescale_q( TPkt->pts, Input_Audio_Stream->time_base, OutPut_Audio_Stream->time_base);

        TPkt->dts = TPkt->pts;
        TPkt->duration = av_rescale_q(TPkt->duration,Input_Audio_Stream->time_base, OutPut_Audio_Stream->time_base) ;
        TPkt->pos = -1;
        TPkt->flags |= AV_PKT_FLAG_KEY;
        TPkt->stream_index = 0;
        av_bitstream_filter_filter(aacbsfc, inputCodecCnt, NULL, &TPkt->data,&TPkt->size, TPkt->data, TPkt->size, 0);

        return true;
    }
    else
    { qDebug() << ERRORMSG + QString("TurnToAAC, no finshPkt ");
        return false;
    }


}
//}
void printTime(){
    int64_t nowtime = av_gettime();
   // cout<< "Now is "<< nowtime - begintime<<endl;
    begintime = av_gettime();
}

//转码为AAC
bool OtherToAAC(AVPacket*& pkt, AVFrame* &decoded_frame)
{
    int got_frame = 0;
    int len;

    decoded_frame = avcodec_alloc_frame();

    int64_t nowtime = av_gettime();
    len = avcodec_decode_audio4(Input_Audio_Stream->codec, decoded_frame, &got_frame, pkt);
    if (len < 0)
    {
        char error[128];
                            const char *errbuf_ptr = error;
                             av_strerror(len, error, sizeof(error));
                             errbuf_ptr = strerror(AVUNERROR(len));
                            cout<< errbuf_ptr<<endl;
        qDebug() << ERRORMSG + QString("OtherToAAC, Error while decoding");
        cout<<"error0"<<endl;
        return false;
    }

    if (got_frame)
    {

        av_free_packet(pkt);
        pkt = NULL;
        static int k;
        if ( !TurnToAAC(decoded_frame, pkt, OutPut_Audio_Stream->codec) )
        {

             //cout<<"error1"<<endl;
            return false;

        }

        pkt->stream_index = AudioIndex;
        return true;
    }
    else
    {
        return false;

    }
    //av_free_packet(pkt);



}
void ChageTimeBase(AVPacket *pak, AVRational Sourcetimebase, AVRational TargetTime, AVRounding rnd =(AVRounding)(AV_ROUND_NEAR_INF | AV_ROUND_PASS_MINMAX))
{
    pak->pts = av_rescale_q_rnd(pak->pts, Sourcetimebase, TargetTime,rnd );
    pak->dts = av_rescale_q_rnd(pak->dts, Sourcetimebase, TargetTime,rnd );
    pak->duration = av_rescale_q(pak->duration,Sourcetimebase, TargetTime) ;
    pak->pos = -1;
}


int main(int argc, char* argv[])
{
    av_register_all();                                    //初始化注册所有要用的编码器解码器等
    avformat_network_init();                              //初始化网络流
    if( !OpenInputStream() )
        return 3;
    if( !FindInputAVStream() )
        return 5;
    InputCodec = avcodec_find_decoder(Input_Audio_Stream->codec->codec_id) ;

    if (!InputCodec)
    Input_Audio_Stream->codec->codec = InputCodec;
    //打开解码器
    if(avcodec_open2(Input_Audio_Stream->codec, InputCodec, 0) < 0)
        return 1;
   if (!InitOutputInformation())
       return -3;
   AVPacket* pkt;
   //AVFrame* decoded_frame  =NULL;
    aacbsfc =  av_bitstream_filter_init("aac_adtstoasc");
   int64_t start_time = av_gettime();
    int k =0;

   const int output_frame_size = OutPut_Audio_Stream->codec->frame_size;
    while(1)
    {

//        if(pkt->stream_index==VideoIndex){
//            AVRational time_base=Input_formatCnt->streams[VideoIndex]->time_base;
//            int64_t pts_time = av_rescale_q(pkt->pts, time_base, time_base_q);
//            int64_t now_time = av_gettime() - start_time;
//            if (pts_time > now_time)
//                av_usleep(pts_time - now_time);

//         }
//        else {
//            AVRational time_base=Input_formatCnt->streams[AudioIndex]->time_base;
//            int64_t pts_time = av_rescale_q(pkt->pts, time_base, time_base_q);
//            int64_t now_time = av_gettime() - start_time;
//            if (pts_time > now_time)
//                av_usleep(pts_time - now_time);
//        }

    AVFrame* decoded_frame;
        pkt = new AVPacket;
        av_init_packet(pkt) ;
        pkt->size = 0;
        pkt->data = NULL;
        int ret = av_read_frame(Input_formatCnt, pkt);
        if (ret < 0)
        {
             break;
        }
        if (pkt->size <= 0)
            continue ;
        if (pkt->stream_index != AudioIndex)
        {
            ChageTimeBase(pkt,Input_Video_Stream->time_base, Output_Video_Stream->time_base);
            av_write_frame(Output_formatCnt, pkt);
       av_free_packet(pkt);
            continue ;
         }



        decoded_frame = avcodec_alloc_frame();
        int got_frame;
       static int64_t lasttime;

        int len = avcodec_decode_audio4(Input_Audio_Stream->codec, decoded_frame, &got_frame, pkt);
         av_free_packet(pkt);
        if (len < 0)
        {

            char error[128];
                                const char *errbuf_ptr = error;
                                 av_strerror(len, error, sizeof(error));
                                 errbuf_ptr = strerror(AVUNERROR(len));
                                cout<< errbuf_ptr<<endl;
            qDebug() << ERRORMSG + QString("OtherToAAC, Error while decoding");
            cout<<"error0"<<endl;
            continue;
        }

        if (got_frame)
        {

            AVPacket test;

            int k =0;
            int finsh;
            memset(&test, 0, sizeof(AVPacket));
            av_init_packet(&test);
           // output_frame->pts = decoded_frame->pkt_pts;
            k =  avcodec_encode_audio2(OutPut_Audio_Stream->codec,&test, output_frame,&finsh);


            delete converted_input_samples;
            converted_input_samples = new uint8_t(output_frame_size);
            bufsize = 0;
            memcpy((void*)converted_input_samples +bufsize*sizeof(uint8_t) ,
                   (void*) decoded_frame->extended_data + copysize*sizeof(uint8_t),
                   ((decoded_frame->nb_samples - copysize)* sizeof(uint8_t)));
             bufsize =  decoded_frame->nb_samples - copysize   ;
            // avcodec_free_frame(&decoded_frame);


            if (k <0)
             {avcodec_free_frame(&decoded_frame);
                cout<<"no decoded_frame"<<endl;
                continue;}
            if (finsh ==1)
            {ChageTimeBase(&test, Input_Audio_Stream->time_base,OutPut_Audio_Stream->time_base);
                test.stream_index =AudioIndex;
                test.flags |= AV_PKT_FLAG_KEY;
            int ret = av_write_frame(Output_formatCnt, &test) ;

            if (ret < 0)
                cout<<"eeeeee"<<endl;}
            cout<<test.pts << " "<< test.dts<<" "<< test.duration<<endl;
             avcodec_free_frame(&decoded_frame);
           // pkt->stream_index = AudioIndex;


            }
        }
       // av_free_packet(pkt);

    }

}

